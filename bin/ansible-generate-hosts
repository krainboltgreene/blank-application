#!/usr/bin/env ruby

require "json"

nodes = JSON.parse(`bin/terraform-nodes | jq '[.[] | [.hostname, .ip]]'`)

groups = nodes.
  # [['a-b-c-d-e', '1.1.1.1']]
  flat_map {|node| node.first.gsub("la-eq-mops-", "").split("-").reduce([]) {|list, key| [*list, [[list.last&.first, key].compact.join("_"), node.last]]}}.
  # [["a", "1.1.1.1"], ["a-b", "1.1.1.1"], ["a-b-c", "1.1.1.1"], ["a-b-c-d", "1.1.1.1"], ["a-b-c-d-e", "1.1.1.1"]]
  group_by {|node| node.first.gsub(/\_\d+/, "")}.
  # {"a"=>[["a", "1.1.1.1"]], "a-b"=>[["a-b", "1.1.1.1"]], "a-b-c"=>[["a-b-c", "1.1.1.1"]], "a-b-c-d"=>[["a-b-c-d", "1.1.1.1"]], "a-b-c-d-e"=>[["a-b-c-d-e", "1.1.1.1"]]}
  transform_values {|nodes| nodes.map(&:last).uniq}
  # {"a"=>["1.1.1.1"], "a-b"=>["1.1.1.1"], "a-b-c"=>["1.1.1.1"], "a-b-c-d"=>["1.1.1.1"], "a-b-c-d-e"=>["1.1.1.1"]}


content = <<-HOSTS
[all]
#{groups.values.flatten.uniq.join("\n")}
#{groups.map {|(hostpartial, nodes)| "[#{hostpartial}]\n#{nodes.join("\n")}" }.join("\n")}
HOSTS

if ARGV[0] == '--verbose'
  puts content
end
File.write("hosts", content)
